// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SyntaxHighlighter renders jsx highlighted text 1`] = `
<pre
  style={
    Object {
      "MozHyphens": "none",
      "MozTabSize": "4",
      "OTabSize": "4",
      "WebkitHyphens": "none",
      "background": "#f5f2f0",
      "color": "black",
      "fontFamily": "Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",
      "hyphens": "none",
      "lineHeight": "1.5",
      "margin": ".5em 0",
      "msHyphens": "none",
      "overflow": "auto",
      "padding": "1em",
      "tabSize": "4",
      "textAlign": "left",
      "textShadow": "0 1px white",
      "whiteSpace": "pre",
      "wordBreak": "normal",
      "wordSpacing": "normal",
      "wordWrap": "normal",
    }
  }
>
  <code
    style={
      Object {
        "MozHyphens": "none",
        "MozTabSize": "4",
        "OTabSize": "4",
        "WebkitHyphens": "none",
        "background": "none",
        "color": "black",
        "fontFamily": "Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",
        "hyphens": "none",
        "lineHeight": "1.5",
        "msHyphens": "none",
        "tabSize": "4",
        "textAlign": "left",
        "textShadow": "0 1px white",
        "whiteSpace": "pre",
        "wordBreak": "normal",
        "wordSpacing": "normal",
        "wordWrap": "normal",
      }
    }
  >
    import React from "react";
import uniquePropHOC from "./lib/unique-prop-hoc";

class Expire extends React.Component {
    constructor(props) {
        super(props);
        this.state = { component: props.children }
    }
    componentDidMount() {
        setTimeout(() =&gt; {
            this.setState({
                component: null
            });
        }, this.props.time || this.props.seconds * 1000);
    }
    render() {
        return this.state.component;
    }
}
  </code>
</pre>
`;

exports[`SyntaxHighlighter should just render text if syntax is not registered 1`] = `
<pre
  style={
    Object {
      "MozHyphens": "none",
      "MozTabSize": "4",
      "OTabSize": "4",
      "WebkitHyphens": "none",
      "background": "#f5f2f0",
      "color": "black",
      "fontFamily": "Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",
      "hyphens": "none",
      "lineHeight": "1.5",
      "margin": ".5em 0",
      "msHyphens": "none",
      "overflow": "auto",
      "padding": "1em",
      "tabSize": "4",
      "textAlign": "left",
      "textShadow": "0 1px white",
      "whiteSpace": "pre",
      "wordBreak": "normal",
      "wordSpacing": "normal",
      "wordWrap": "normal",
    }
  }
>
  <code
    style={
      Object {
        "MozHyphens": "none",
        "MozTabSize": "4",
        "OTabSize": "4",
        "WebkitHyphens": "none",
        "background": "none",
        "color": "black",
        "fontFamily": "Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",
        "hyphens": "none",
        "lineHeight": "1.5",
        "msHyphens": "none",
        "tabSize": "4",
        "textAlign": "left",
        "textShadow": "0 1px white",
        "whiteSpace": "pre",
        "wordBreak": "normal",
        "wordSpacing": "normal",
        "wordWrap": "normal",
      }
    }
  >
    print(
    <span
      className={
        Array [
          "hljs-string",
        ]
      }
      style={Object {}}
    >
      'hello'
    </span>
    )
  </code>
</pre>
`;

exports[`When the code split is loaded - SyntaxHighlighter renders jsx highlighted text 1`] = `
<pre
  style={
    Object {
      "MozHyphens": "none",
      "MozTabSize": "4",
      "OTabSize": "4",
      "WebkitHyphens": "none",
      "background": "#f5f2f0",
      "color": "black",
      "fontFamily": "Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",
      "hyphens": "none",
      "lineHeight": "1.5",
      "margin": ".5em 0",
      "msHyphens": "none",
      "overflow": "auto",
      "padding": "1em",
      "tabSize": "4",
      "textAlign": "left",
      "textShadow": "0 1px white",
      "whiteSpace": "pre",
      "wordBreak": "normal",
      "wordSpacing": "normal",
      "wordWrap": "normal",
    }
  }
>
  <code
    style={
      Object {
        "MozHyphens": "none",
        "MozTabSize": "4",
        "OTabSize": "4",
        "WebkitHyphens": "none",
        "background": "none",
        "color": "black",
        "fontFamily": "Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",
        "hyphens": "none",
        "lineHeight": "1.5",
        "msHyphens": "none",
        "tabSize": "4",
        "textAlign": "left",
        "textShadow": "0 1px white",
        "whiteSpace": "pre",
        "wordBreak": "normal",
        "wordSpacing": "normal",
        "wordWrap": "normal",
      }
    }
  >
    <span
      className={
        Array [
          "hljs-keyword",
        ]
      }
      style={Object {}}
    >
      import
    </span>
     React 
    <span
      className={
        Array [
          "hljs-keyword",
        ]
      }
      style={Object {}}
    >
      from
    </span>
     
    <span
      className={
        Array [
          "hljs-string",
        ]
      }
      style={Object {}}
    >
      "react"
    </span>
    ;
  
    <span
      className={
        Array [
          "hljs-keyword",
        ]
      }
      style={Object {}}
    >
      import
    </span>
     uniquePropHOC 
    <span
      className={
        Array [
          "hljs-keyword",
        ]
      }
      style={Object {}}
    >
      from
    </span>
     
    <span
      className={
        Array [
          "hljs-string",
        ]
      }
      style={Object {}}
    >
      "./lib/unique-prop-hoc"
    </span>
    ;
  
  
    <span
      className={
        Array [
          "hljs-class",
        ]
      }
      style={Object {}}
    >
      <span
        className={
          Array [
            "hljs-keyword",
          ]
        }
        style={Object {}}
      >
        class
      </span>
       
      <span
        className={
          Array [
            "hljs-title",
          ]
        }
        style={Object {}}
      >
        Expire
      </span>
       
      <span
        className={
          Array [
            "hljs-keyword",
          ]
        }
        style={Object {}}
      >
        extends
      </span>
       
      <span
        className={
          Array [
            "hljs-title",
          ]
        }
        style={Object {}}
      >
        React
      </span>
      .
      <span
        className={
          Array [
            "hljs-title",
          ]
        }
        style={Object {}}
      >
        Component
      </span>
       
    </span>
    {
      
    <span
      className={
        Array [
          "hljs-keyword",
        ]
      }
      style={Object {}}
    >
      constructor
    </span>
    (props) {
          
    <span
      className={
        Array [
          "hljs-keyword",
        ]
      }
      style={Object {}}
    >
      super
    </span>
    (props);
          
    <span
      className={
        Array [
          "hljs-keyword",
        ]
      }
      style={Object {}}
    >
      this
    </span>
    .state = { 
    <span
      className={
        Array [
          "hljs-attr",
        ]
      }
      style={Object {}}
    >
      component
    </span>
    : props.children }
      }
      componentDidMount() {
          setTimeout(
    <span
      className={
        Array [
          "hljs-function",
        ]
      }
      style={Object {}}
    >
      <span
        className={
          Array [
            "hljs-params",
          ]
        }
        style={Object {}}
      >
        ()
      </span>
       =&gt;
    </span>
     {
              
    <span
      className={
        Array [
          "hljs-keyword",
        ]
      }
      style={Object {}}
    >
      this
    </span>
    .setState({
                  
    <span
      className={
        Array [
          "hljs-attr",
        ]
      }
      style={Object {}}
    >
      component
    </span>
    : 
    <span
      className={
        Array [
          "hljs-literal",
        ]
      }
      style={Object {}}
    >
      null
    </span>
    
              });
          }, 
    <span
      className={
        Array [
          "hljs-keyword",
        ]
      }
      style={Object {}}
    >
      this
    </span>
    .props.time || 
    <span
      className={
        Array [
          "hljs-keyword",
        ]
      }
      style={Object {}}
    >
      this
    </span>
    .props.seconds * 
    <span
      className={
        Array [
          "hljs-number",
        ]
      }
      style={Object {}}
    >
      1000
    </span>
    );
      }
      render() {
          
    <span
      className={
        Array [
          "hljs-keyword",
        ]
      }
      style={Object {}}
    >
      return
    </span>
     
    <span
      className={
        Array [
          "hljs-keyword",
        ]
      }
      style={Object {}}
    >
      this
    </span>
    .state.component;
      }
  }
  </code>
</pre>
`;
