// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SyntaxHighlighter render as text if language doesnt exist 1`] = `
<pre
  style={
    Object {
      "MozHyphens": "none",
      "MozTabSize": "4",
      "OTabSize": "4",
      "WebkitHyphens": "none",
      "background": "#f5f2f0",
      "color": "black",
      "fontFamily": "Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",
      "fontSize": "1em",
      "hyphens": "none",
      "lineHeight": "1.5",
      "margin": ".5em 0",
      "msHyphens": "none",
      "overflow": "auto",
      "padding": "1em",
      "tabSize": "4",
      "textAlign": "left",
      "textShadow": "0 1px white",
      "whiteSpace": "pre",
      "wordBreak": "normal",
      "wordSpacing": "normal",
      "wordWrap": "normal",
    }
  }
>
  <code
    style={
      Object {
        "MozHyphens": "none",
        "MozTabSize": "4",
        "OTabSize": "4",
        "WebkitHyphens": "none",
        "background": "none",
        "color": "black",
        "fontFamily": "Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",
        "fontSize": "1em",
        "hyphens": "none",
        "lineHeight": "1.5",
        "msHyphens": "none",
        "tabSize": "4",
        "textAlign": "left",
        "textShadow": "0 1px white",
        "whiteSpace": "pre",
        "wordBreak": "normal",
        "wordSpacing": "normal",
        "wordWrap": "normal",
      }
    }
  >
    <span
      style={Object {}}
    >
      print('hello')
    </span>
  </code>
</pre>
`;

exports[`SyntaxHighlighter renders fortran highlighted text 1`] = `
<pre
  style={
    Object {
      "MozHyphens": "none",
      "MozTabSize": "4",
      "OTabSize": "4",
      "WebkitHyphens": "none",
      "background": "#f5f2f0",
      "color": "black",
      "fontFamily": "Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",
      "fontSize": "1em",
      "hyphens": "none",
      "lineHeight": "1.5",
      "margin": ".5em 0",
      "msHyphens": "none",
      "overflow": "auto",
      "padding": "1em",
      "tabSize": "4",
      "textAlign": "left",
      "textShadow": "0 1px white",
      "whiteSpace": "pre",
      "wordBreak": "normal",
      "wordSpacing": "normal",
      "wordWrap": "normal",
    }
  }
>
  <code
    style={
      Object {
        "MozHyphens": "none",
        "MozTabSize": "4",
        "OTabSize": "4",
        "WebkitHyphens": "none",
        "background": "none",
        "color": "black",
        "fontFamily": "Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",
        "fontSize": "1em",
        "hyphens": "none",
        "lineHeight": "1.5",
        "msHyphens": "none",
        "tabSize": "4",
        "textAlign": "left",
        "textShadow": "0 1px white",
        "whiteSpace": "pre",
        "wordBreak": "normal",
        "wordSpacing": "normal",
        "wordWrap": "normal",
      }
    }
  >
    <span
      style={Object {}}
    >
      

    </span>
                C AREA OF A TRIANGLE WITH A STANDARD SQUARE ROOT FUNCTION

                C INPUT - TAPE READER UNIT 5, INTEGER INPUT

                C OUTPUT - LINE PRINTER UNIT 6, REAL OUTPUT

                C INPUT ERROR DISPLAY ERROR OUTPUT CODE 1 IN JOB CONTROL LISTING

                    READ INPUT TAPE 5, 501, IA, IB, IC

                501 FORMAT (3I5)

                C IA, IB, AND IC MAY NOT BE NEGATIVE OR ZERO

                C FURTHERMORE, THE SUM OF TWO SIDES OF A TRIANGLE

                C MUST BE GREATER THAN THE THIRD SIDE, SO WE CHECK FOR THAT, TOO

                    IF (IA) 777, 777, 701

                701 IF (IB) 777, 777, 702

                702 IF (IC) 777, 777, 703

                703 IF (IA+IB-IC) 777, 777, 704

                704 IF (IA+IC-IB) 777, 777, 705

                705 IF (IB+IC-IA) 777, 777, 799

                777 STOP 1

                C USING HERON'S FORMULA WE CALCULATE THE

                C AREA OF THE TRIANGLE

                799 S = FLOATF (IA + IB + IC) / 2.0

                    AREA = SQRTF( S * (S - FLOATF(IA)) * (S - FLOATF(IB)) *

                    +     (S - FLOATF(IC)))

                    WRITE OUTPUT TAPE 6, 601, IA, IB, IC, AREA

                601 FORMAT (4H A= ,I5,5H  B= ,I5,5H  C= ,I5,8H  AREA= ,F10.2,

                    +        13H SQUARE UNITS)

                    STOP

                    END

                       

  </code>
</pre>
`;

exports[`SyntaxHighlighter renders javascript highlighted text 1`] = `
<pre
  style={
    Object {
      "MozHyphens": "none",
      "MozTabSize": "4",
      "OTabSize": "4",
      "WebkitHyphens": "none",
      "background": "#f5f2f0",
      "color": "black",
      "fontFamily": "Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",
      "fontSize": "1em",
      "hyphens": "none",
      "lineHeight": "1.5",
      "margin": ".5em 0",
      "msHyphens": "none",
      "overflow": "auto",
      "padding": "1em",
      "tabSize": "4",
      "textAlign": "left",
      "textShadow": "0 1px white",
      "whiteSpace": "pre",
      "wordBreak": "normal",
      "wordSpacing": "normal",
      "wordWrap": "normal",
    }
  }
>
  <code
    style={
      Object {
        "MozHyphens": "none",
        "MozTabSize": "4",
        "OTabSize": "4",
        "WebkitHyphens": "none",
        "background": "none",
        "color": "black",
        "fontFamily": "Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",
        "fontSize": "1em",
        "hyphens": "none",
        "lineHeight": "1.5",
        "msHyphens": "none",
        "tabSize": "4",
        "textAlign": "left",
        "textShadow": "0 1px white",
        "whiteSpace": "pre",
        "wordBreak": "normal",
        "wordSpacing": "normal",
        "wordWrap": "normal",
      }
    }
  >
    <span
      style={Object {}}
    >
      import React from "react";

    </span>
    import uniquePropHOC from "./lib/unique-prop-hoc";

    

    class Expire extends React.Component {

        constructor(props) {

            super(props);

            this.state = { component: props.children }

        }

        componentDidMount() {

            setTimeout(() =&gt; {

                this.setState({

                    component: null

                });

            }, this.props.time || this.props.seconds * 1000);

        }

        render() {

            return this.state.component;

        }

    }

  </code>
</pre>
`;

exports[`SyntaxHighlighter renders text while language loads 1`] = `
<pre
  style={
    Object {
      "MozHyphens": "none",
      "MozTabSize": "4",
      "OTabSize": "4",
      "WebkitHyphens": "none",
      "background": "#f5f2f0",
      "color": "black",
      "fontFamily": "Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",
      "fontSize": "1em",
      "hyphens": "none",
      "lineHeight": "1.5",
      "margin": ".5em 0",
      "msHyphens": "none",
      "overflow": "auto",
      "padding": "1em",
      "tabSize": "4",
      "textAlign": "left",
      "textShadow": "0 1px white",
      "whiteSpace": "pre",
      "wordBreak": "normal",
      "wordSpacing": "normal",
      "wordWrap": "normal",
    }
  }
>
  <code
    style={
      Object {
        "MozHyphens": "none",
        "MozTabSize": "4",
        "OTabSize": "4",
        "WebkitHyphens": "none",
        "background": "none",
        "color": "black",
        "fontFamily": "Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",
        "fontSize": "1em",
        "hyphens": "none",
        "lineHeight": "1.5",
        "msHyphens": "none",
        "tabSize": "4",
        "textAlign": "left",
        "textShadow": "0 1px white",
        "whiteSpace": "pre",
        "wordBreak": "normal",
        "wordSpacing": "normal",
        "wordWrap": "normal",
      }
    }
  >
    <span
      style={Object {}}
    >
      

    </span>
                C AREA OF A TRIANGLE WITH A STANDARD SQUARE ROOT FUNCTION

                C INPUT - TAPE READER UNIT 5, INTEGER INPUT

                C OUTPUT - LINE PRINTER UNIT 6, REAL OUTPUT

                C INPUT ERROR DISPLAY ERROR OUTPUT CODE 1 IN JOB CONTROL LISTING

                    READ INPUT TAPE 5, 501, IA, IB, IC

                501 FORMAT (3I5)

                C IA, IB, AND IC MAY NOT BE NEGATIVE OR ZERO

                C FURTHERMORE, THE SUM OF TWO SIDES OF A TRIANGLE

                C MUST BE GREATER THAN THE THIRD SIDE, SO WE CHECK FOR THAT, TOO

                    IF (IA) 777, 777, 701

                701 IF (IB) 777, 777, 702

                702 IF (IC) 777, 777, 703

                703 IF (IA+IB-IC) 777, 777, 704

                704 IF (IA+IC-IB) 777, 777, 705

                705 IF (IB+IC-IA) 777, 777, 799

                777 STOP 1

                C USING HERON'S FORMULA WE CALCULATE THE

                C AREA OF THE TRIANGLE

                799 S = FLOATF (IA + IB + IC) / 2.0

                    AREA = SQRTF( S * (S - FLOATF(IA)) * (S - FLOATF(IB)) *

                    +     (S - FLOATF(IC)))

                    WRITE OUTPUT TAPE 6, 601, IA, IB, IC, AREA

                601 FORMAT (4H A= ,I5,5H  B= ,I5,5H  C= ,I5,8H  AREA= ,F10.2,

                    +        13H SQUARE UNITS)

                    STOP

                    END

                       

  </code>
</pre>
`;

exports[`When the code split is loaded - SyntaxHighlighter renders jsx highlighted text 1`] = `
<pre
  style={
    Object {
      "MozHyphens": "none",
      "MozTabSize": "4",
      "OTabSize": "4",
      "WebkitHyphens": "none",
      "background": "#f5f2f0",
      "color": "black",
      "fontFamily": "Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",
      "fontSize": "1em",
      "hyphens": "none",
      "lineHeight": "1.5",
      "margin": ".5em 0",
      "msHyphens": "none",
      "overflow": "auto",
      "padding": "1em",
      "tabSize": "4",
      "textAlign": "left",
      "textShadow": "0 1px white",
      "whiteSpace": "pre",
      "wordBreak": "normal",
      "wordSpacing": "normal",
      "wordWrap": "normal",
    }
  }
>
  <code
    style={
      Object {
        "MozHyphens": "none",
        "MozTabSize": "4",
        "OTabSize": "4",
        "WebkitHyphens": "none",
        "background": "none",
        "color": "black",
        "fontFamily": "Consolas, Monaco, 'Andale Mono', 'Ubuntu Mono', monospace",
        "fontSize": "1em",
        "hyphens": "none",
        "lineHeight": "1.5",
        "msHyphens": "none",
        "tabSize": "4",
        "textAlign": "left",
        "textShadow": "0 1px white",
        "whiteSpace": "pre",
        "wordBreak": "normal",
        "wordSpacing": "normal",
        "wordWrap": "normal",
      }
    }
  >
    <span
      className="hljs-keyword"
      style={Object {}}
    >
      import
    </span>
    <span
      style={Object {}}
    >
       React 
    </span>
    <span
      className="hljs-keyword"
      style={Object {}}
    >
      from
    </span>
    <span
      style={Object {}}
    >
       
    </span>
    <span
      className="hljs-string"
      style={Object {}}
    >
      "react"
    </span>
    <span
      style={Object {}}
    >
      ;

    </span>
    <span
      style={Object {}}
    >
        
    </span>
    <span
      className="hljs-keyword"
      style={Object {}}
    >
      import
    </span>
    <span
      style={Object {}}
    >
       uniquePropHOC 
    </span>
    <span
      className="hljs-keyword"
      style={Object {}}
    >
      from
    </span>
    <span
      style={Object {}}
    >
       
    </span>
    <span
      className="hljs-string"
      style={Object {}}
    >
      "./lib/unique-prop-hoc"
    </span>
    <span
      style={Object {}}
    >
      ;

    </span>
      

    <span
      style={Object {}}
    >
        
    </span>
    <span
      className="hljs-class hljs-keyword"
      style={Object {}}
    >
      class
    </span>
    <span
      className="hljs-class"
      style={Object {}}
    >
       
    </span>
    <span
      className="hljs-class hljs-title"
      style={Object {}}
    >
      Expire
    </span>
    <span
      className="hljs-class"
      style={Object {}}
    >
       
    </span>
    <span
      className="hljs-class hljs-keyword"
      style={Object {}}
    >
      extends
    </span>
    <span
      className="hljs-class"
      style={Object {}}
    >
       
    </span>
    <span
      className="hljs-class hljs-title"
      style={Object {}}
    >
      React
    </span>
    <span
      className="hljs-class"
      style={Object {}}
    >
      .
    </span>
    <span
      className="hljs-class hljs-title"
      style={Object {}}
    >
      Component
    </span>
    <span
      className="hljs-class"
      style={Object {}}
    >
       
    </span>
    <span
      style={Object {}}
    >
      {

    </span>
    <span
      style={Object {}}
    >
            
    </span>
    <span
      className="hljs-keyword"
      style={Object {}}
    >
      constructor
    </span>
    <span
      style={Object {}}
    >
      (props) {

    </span>
    <span
      style={Object {}}
    >
                
    </span>
    <span
      className="hljs-keyword"
      style={Object {}}
    >
      super
    </span>
    <span
      style={Object {}}
    >
      (props);

    </span>
    <span
      style={Object {}}
    >
                
    </span>
    <span
      className="hljs-keyword"
      style={Object {}}
    >
      this
    </span>
    <span
      style={Object {}}
    >
      .state = { 
    </span>
    <span
      className="hljs-attr"
      style={Object {}}
    >
      component
    </span>
    <span
      style={Object {}}
    >
      : props.children }

    </span>
          }

          componentDidMount() {

    <span
      style={Object {}}
    >
                setTimeout(
    </span>
    <span
      className="hljs-function hljs-params"
      style={Object {}}
    >
      ()
    </span>
    <span
      className="hljs-function"
      style={Object {}}
    >
       =&gt;
    </span>
    <span
      style={Object {}}
    >
       {

    </span>
    <span
      style={Object {}}
    >
                    
    </span>
    <span
      className="hljs-keyword"
      style={Object {}}
    >
      this
    </span>
    <span
      style={Object {}}
    >
      .setState({

    </span>
    <span
      style={Object {}}
    >
                        
    </span>
    <span
      className="hljs-attr"
      style={Object {}}
    >
      component
    </span>
    <span
      style={Object {}}
    >
      : 
    </span>
    <span
      className="hljs-literal"
      style={Object {}}
    >
      null
    </span>
    <span
      style={Object {}}
    >
      

    </span>
                  });

    <span
      style={Object {}}
    >
                }, 
    </span>
    <span
      className="hljs-keyword"
      style={Object {}}
    >
      this
    </span>
    <span
      style={Object {}}
    >
      .props.time || 
    </span>
    <span
      className="hljs-keyword"
      style={Object {}}
    >
      this
    </span>
    <span
      style={Object {}}
    >
      .props.seconds * 
    </span>
    <span
      className="hljs-number"
      style={Object {}}
    >
      1000
    </span>
    <span
      style={Object {}}
    >
      );

    </span>
          }

          render() {

    <span
      style={Object {}}
    >
                
    </span>
    <span
      className="hljs-keyword"
      style={Object {}}
    >
      return
    </span>
    <span
      style={Object {}}
    >
       
    </span>
    <span
      className="hljs-keyword"
      style={Object {}}
    >
      this
    </span>
    <span
      style={Object {}}
    >
      .state.component;

    </span>
          }

      }

  </code>
</pre>
`;
